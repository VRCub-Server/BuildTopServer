{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/config.ts"],"sourcesContent":["\n// 重要提示：请将这些值替换为您的真实 App ID 和 App Key\n// 并且强烈建议将它们存储在环境变量中，而不是硬编码在代码里。\nexport const APP_ID = process.env.NEXT_PUBLIC_APP_ID || '1152';\nexport const APP_KEY = process.env.NEXT_PUBLIC_APP_KEY || '9b8011704126a18d76ca4868c30f73af';\n\nexport const API_BASE_URL = 'https://login.shw1.com';\n\n// 定义支持的登录方式及其显示名称\nexport const LOGIN_PROVIDERS = [\n  { type: 'qq', name: 'QQ' },\n  { type: 'wx', name: '微信' },\n  // { type: 'alipay', name: '支付宝' }, // Removed\n  // { type: 'sina', name: '微博' },   // Removed\n  // { type: 'baidu', name: '百度' },  // Removed\n  // 根据需要添加更多提供商\n  // { type: 'google', name: '谷歌' },\n  // { type: 'microsoft', name: '微软' },\n];\n\nexport const SESSION_COOKIE_NAME = 'userSession';\n"],"names":[],"mappings":"AACA,qCAAqC;AACrC,gCAAgC;;;;;;;;AACzB,MAAM,SAAS,QAAQ,GAAG,CAAC,kBAAkB,IAAI;AACjD,MAAM,UAAU,QAAQ,GAAG,CAAC,mBAAmB,IAAI;AAEnD,MAAM,eAAe;AAGrB,MAAM,kBAAkB;IAC7B;QAAE,MAAM;QAAM,MAAM;IAAK;IACzB;QAAE,MAAM;QAAM,MAAM;IAAK;CAO1B;AAEM,MAAM,sBAAsB","debugId":null}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.ts"],"sourcesContent":["\nimport { PrismaClient } from '@prisma/client';\n\ndeclare global {\n  // allow global `var` declarations\n  // eslint-disable-next-line no-unused-vars\n  var prisma: PrismaClient | undefined;\n}\n\nexport const prisma =\n  global.prisma ||\n  new PrismaClient({\n    // log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  });\n\nif (process.env.NODE_ENV !== 'production') {\n  global.prisma = prisma;\n}\n\nexport default prisma;\n"],"names":[],"mappings":";;;;AACA;;AAQO,MAAM,SACX,OAAO,MAAM,IACb,IAAI,6HAAA,CAAA,eAAY,CAAC;AAEjB;AAEF,wCAA2C;IACzC,OAAO,MAAM,GAAG;AAClB;uCAEe","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { APP_ID, APP_KEY, API_BASE_URL, SESSION_COOKIE_NAME } from '@/config';\nimport type { User, LoginUrlResponse, AuthCallbackResponse, Building, BuildingStatus, Competition, CompetitionStatus, BuildingSubmissionFormData } from '@/types';\nimport { revalidatePath } from 'next/cache';\nimport { v4 as uuidv4 } from 'uuid';\nimport prisma from '@/lib/db'; // Import Prisma client\n\nconst RELEVANT_BUILDING_PATHS = [\n  '/', \n  '/history', \n  '/admin', \n  '/dashboard/my-projects', \n  '/vote-analysis', \n  '/dashboard/submit',\n];\n\nfunction serializeDates<T>(data: T): T {\n  if (data === null || data === undefined) {\n    return data;\n  }\n  if (typeof data === 'object') {\n    if (Array.isArray(data)) {\n      return data.map(item => serializeDates(item)) as any;\n    }\n    const newData: any = {};\n    for (const key in data) {\n      const value = data[key];\n      if (value instanceof Date) {\n        newData[key] = value.toISOString();\n      } else if (typeof value === 'object') {\n        newData[key] = serializeDates(value);\n      } else {\n        newData[key] = value;\n      }\n    }\n    return newData;\n  }\n  return data;\n}\n\n\nexport async function handleLoginRedirect(providerType: string) {\n  const redirectUri = process.env.NODE_ENV === 'production' \n    ? 'YOUR_PRODUCTION_CALLBACK_URL' // TODO: Replace with actual production URL\n    : `http://localhost:${process.env.PORT || 9002}/auth/callback`;\n\n  const url = `${API_BASE_URL}/connect.php?act=login&appid=${APP_ID}&appkey=${APP_KEY}&type=${providerType}&redirect_uri=${encodeURIComponent(redirectUri)}`;\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ msg: '获取登录链接失败，响应无效。' }));\n      console.error('Error fetching login URL:', errorData);\n      return { error: errorData.msg || '获取登录链接失败' };\n    }\n    const data: LoginUrlResponse = await response.json();\n    if (data.code === 0 && data.url) {\n      redirect(data.url);\n    } else {\n      console.error('Error in login URL response:', data);\n      return { error: data.msg || '获取登录链接时发生未知错误' };\n    }\n  } catch (error) {\n    console.error('Network error fetching login URL:', error);\n    return { error: '网络错误，无法连接到登录服务' };\n  }\n}\n\nexport async function processLoginCallback(type: string, code: string): Promise<{ success: boolean; error?: string }> {\n  const url = `${API_BASE_URL}/connect.php?act=callback&appid=${APP_ID}&appkey=${APP_KEY}&type=${type}&code=${code}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ msg: '处理回调失败，响应无效。' }));\n      console.error('Error fetching user info:', errorData);\n      return { success: false, error: errorData.msg || '处理回调失败' };\n    }\n    const data: AuthCallbackResponse = await response.json();\n    if (data.code === 0 && data.social_uid && data.nickname && data.faceimg) {\n      const user: User = {\n        socialUid: data.social_uid,\n        nickname: data.nickname,\n        faceimg: data.faceimg,\n        type: data.type || type,\n        accessToken: data.access_token,\n        gender: data.gender,\n        location: data.location,\n        ip: data.ip,\n      };\n      cookies().set(SESSION_COOKIE_NAME, JSON.stringify(user), {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        maxAge: 60 * 60 * 24 * 7, \n        path: '/',\n      });\n      return { success: true };\n    } else if (data.code === 2) {\n      return { success: false, error: '登录未完成，请重试。' };\n    } \n    else {\n      console.error('Error in user info response:', data);\n      return { success: false, error: data.msg || '获取用户信息时发生未知错误' };\n    }\n  } catch (error) {\n    console.error('Network error fetching user info:', error);\n    return { success: false, error: '网络错误，无法获取用户信息' };\n  }\n}\n\nexport async function handleStaffLogin(\n  prevState: { error?: string } | undefined,\n  formData: FormData\n): Promise<{ error?: string } | void> {\n  const username = formData.get('username') as string;\n  const password = formData.get('password') as string;\n\n  if (username === 'admin' && password === '123456') {\n    const user: User = {\n      socialUid: `staff_${username.toLowerCase()}`,\n      nickname: '后台管理员 (STAFF)',\n      faceimg: 'https://placehold.co/100x100.png?text=S', \n      type: 'staff',\n    };\n    cookies().set(SESSION_COOKIE_NAME, JSON.stringify(user), {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 60 * 60 * 24 * 7, \n      path: '/',\n    });\n    redirect('/'); \n  } else {\n    return { error: '无效的员工帐户或密码。' };\n  }\n}\n\nexport async function handleLogout() {\n  cookies().delete(SESSION_COOKIE_NAME);\n  RELEVANT_BUILDING_PATHS.forEach(path => revalidatePath(path));\n  redirect('/');\n}\n\nexport async function getUserSession(): Promise<User | null> {\n  const sessionCookie = cookies().get(SESSION_COOKIE_NAME);\n  if (sessionCookie?.value) {\n    try {\n      return JSON.parse(sessionCookie.value) as User;\n    } catch (error) {\n      console.error('Error parsing session cookie:', error);\n      return null;\n    }\n  }\n  return null;\n}\n\nexport async function fetchUserSessionForClient(): Promise<User | null> {\n  return await getUserSession();\n}\n\nexport async function submitVote(buildingId: string): Promise<{ success: boolean; message: string; newVotes?: number }> {\n  const user = await getUserSession();\n  if (!user) {\n    return { success: false, message: '请先登录再投票！' };\n  }\n\n  const building = await prisma.building.findUnique({ where: { id: buildingId } });\n  if (!building) {\n    return { success: false, message: '建筑不存在！' };\n  }\n\n  if (building.status !== '有效') {\n    return { success: false, message: '此作品当前状态无法投票。' };\n  }\n\n  const existingVote = await prisma.userVote.findUnique({\n    where: { userId_buildingId: { userId: user.socialUid, buildingId } },\n  });\n\n  let newVoteCount;\n  let message;\n\n  try {\n    if (existingVote) {\n      // Unvote\n      await prisma.$transaction([\n        prisma.userVote.delete({ where: { userId_buildingId: { userId: user.socialUid, buildingId } } }),\n        prisma.building.update({ where: { id: buildingId }, data: { votes: { decrement: 1 } } }),\n      ]);\n      newVoteCount = building.votes - 1;\n      message = '取消投票成功！';\n    } else {\n      // Vote\n      await prisma.$transaction([\n        prisma.userVote.create({ data: { userId: user.socialUid, buildingId } }),\n        prisma.building.update({ where: { id: buildingId }, data: { votes: { increment: 1 } } }),\n      ]);\n      newVoteCount = building.votes + 1;\n      message = '投票成功！';\n    }\n    \n    RELEVANT_BUILDING_PATHS.forEach(path => revalidatePath(path));\n    revalidatePath(`/building/${buildingId}`);\n    if (building.competitionId) revalidatePath(`/history/competition/${building.competitionId}`);\n\n    return { success: true, message, newVotes: newVoteCount };\n  } catch (error) {\n    console.error(\"Error submitting vote:\", error);\n    return { success: false, message: '投票操作失败，请稍后再试。' };\n  }\n}\n\nexport async function getRawBuildings(currentUserParam?: User | null): Promise<Building[]> {\n  let currentUser = currentUserParam;\n  if (currentUser === undefined) { \n      currentUser = await getUserSession();\n  }\n\n  const buildingsFromDb = await prisma.building.findMany({\n    orderBy: { submissionDate: 'desc' },\n  });\n\n  let userVotesForBuildings: string[] = [];\n  if (currentUser) {\n    const votes = await prisma.userVote.findMany({\n      where: { \n        userId: currentUser.socialUid,\n        buildingId: { in: buildingsFromDb.map(b => b.id) }\n      },\n      select: { buildingId: true }\n    });\n    userVotesForBuildings = votes.map(v => v.buildingId);\n  }\n\n  const buildings = buildingsFromDb.map(b => ({\n    ...b,\n    submissionDate: b.submissionDate?.toISOString(), // Ensure dates are serialized if needed by client\n    lastReportDate: b.lastReportDate?.toISOString(),\n    createdAt: b.createdAt.toISOString(),\n    updatedAt: b.updatedAt.toISOString(),\n    currentUserHasVoted: currentUser ? userVotesForBuildings.includes(b.id) : false,\n  }));\n  \n  return serializeDates(buildings as unknown as Building[]);\n}\n\n\nexport async function getBuildingById(id: string, currentUserParam?: User | null): Promise<Building | undefined> {\n  let currentUser = currentUserParam;\n  if (currentUser === undefined) { \n    currentUser = await getUserSession();\n  }\n  const buildingFromDb = await prisma.building.findUnique({ where: { id } });\n\n  if (buildingFromDb) {\n    let currentUserHasVoted = false;\n    if (currentUser) {\n      const vote = await prisma.userVote.findUnique({\n        where: { userId_buildingId: { userId: currentUser.socialUid, buildingId: id } }\n      });\n      currentUserHasVoted = !!vote;\n    }\n    const building: Building = {\n        ...buildingFromDb,\n        submissionDate: buildingFromDb.submissionDate?.toISOString(),\n        lastReportDate: buildingFromDb.lastReportDate?.toISOString(),\n        createdAt: buildingFromDb.createdAt.toISOString(),\n        updatedAt: buildingFromDb.updatedAt.toISOString(),\n        currentUserHasVoted,\n    }\n    return serializeDates(building);\n  }\n  return undefined;\n}\n\nexport interface HistoricalCompetitionWithWorks extends Competition {\n  works: Building[];\n}\n\nexport async function getActiveWorks(currentUserParam?: User | null): Promise<Building[]> {\n  let currentUser = currentUserParam;\n  if (currentUser === undefined) {\n    currentUser = await getUserSession();\n  }\n\n  const activeCompetitions = await prisma.competition.findMany({\n    where: { status: '进行中' },\n  });\n  const activeCompetitionIds = activeCompetitions.map(comp => comp.id);\n\n  if (activeCompetitionIds.length === 0) return [];\n\n  const activeWorksFromDb = await prisma.building.findMany({\n    where: {\n      competitionId: { in: activeCompetitionIds },\n      status: '有效',\n    },\n    orderBy: { votes: 'desc' },\n  });\n  \n  let userVotesForBuildings: string[] = [];\n  if (currentUser) {\n    const votes = await prisma.userVote.findMany({\n      where: { \n        userId: currentUser.socialUid,\n        buildingId: { in: activeWorksFromDb.map(b => b.id) }\n      },\n      select: { buildingId: true }\n    });\n    userVotesForBuildings = votes.map(v => v.buildingId);\n  }\n\n  const works: Building[] = activeWorksFromDb.map(b => ({\n    ...b,\n    submissionDate: b.submissionDate?.toISOString(),\n    lastReportDate: b.lastReportDate?.toISOString(),\n    createdAt: b.createdAt.toISOString(),\n    updatedAt: b.updatedAt.toISOString(),\n    currentUserHasVoted: currentUser ? userVotesForBuildings.includes(b.id) : false,\n  }));\n\n  return serializeDates(works);\n}\n\n\nexport async function getHistoricalCompetitions(): Promise<Competition[]> {\n  const competitionsFromDb = await prisma.competition.findMany({\n    where: { NOT: { status: '进行中' } },\n    orderBy: [\n      { year: 'desc' },\n      { startDate: 'desc' },\n      { name: 'asc' },\n    ],\n  });\n  return serializeDates(competitionsFromDb as unknown as Competition[]);\n}\n\nexport async function getCompetitionById(competitionId: string): Promise<Competition | undefined> {\n  const competition = await prisma.competition.findUnique({ where: { id: competitionId } });\n  return competition ? serializeDates(competition as unknown as Competition) : undefined;\n}\n\n\nexport async function getCompetitionWithWorks(competitionId: string, currentUserParam?: User | null): Promise<HistoricalCompetitionWithWorks | undefined> {\n  let currentUser = currentUserParam;\n   if (currentUser === undefined) { \n    currentUser = await getUserSession();\n  }\n\n  const competition = await prisma.competition.findUnique({\n    where: { id: competitionId },\n  });\n  if (!competition) { \n    return undefined;\n  }\n\n  const worksForCompetitionFromDb = await prisma.building.findMany({\n    where: { competitionId: competitionId },\n    orderBy: { votes: 'desc' },\n  });\n  \n  let userVotesForBuildings: string[] = [];\n  if (currentUser) {\n    const votes = await prisma.userVote.findMany({\n      where: { \n        userId: currentUser.socialUid,\n        buildingId: { in: worksForCompetitionFromDb.map(b => b.id) }\n      },\n      select: { buildingId: true }\n    });\n    userVotesForBuildings = votes.map(v => v.buildingId);\n  }\n  \n  const works: Building[] = worksForCompetitionFromDb.map(b => ({\n    ...b,\n    submissionDate: b.submissionDate?.toISOString(),\n    lastReportDate: b.lastReportDate?.toISOString(),\n    createdAt: b.createdAt.toISOString(),\n    updatedAt: b.updatedAt.toISOString(),\n    currentUserHasVoted: currentUser ? userVotesForBuildings.includes(b.id) : false,\n  }));\n\n  return serializeDates({ \n    ...competition,\n    works,\n  } as unknown as HistoricalCompetitionWithWorks);\n}\n\n\nexport async function updateBuildingStatus(buildingId: string, newStatus: BuildingStatus): Promise<{ success: boolean; message: string }> {\n  const building = await prisma.building.findUnique({where: {id: buildingId}});\n  if (!building) {\n    return { success: false, message: '建筑不存在！' };\n  }\n  const updateData: Partial<Building> & { reportReason?: undefined, lastReportedBy?: undefined, lastReportDate?: undefined } = { status: newStatus };\n  if (newStatus !== '审查中-被举报') {\n    updateData.reportReason = undefined;\n    updateData.lastReportedBy = undefined;\n    updateData.lastReportDate = undefined;\n  }\n\n  const updatedBuilding = await prisma.building.update({\n    where: { id: buildingId },\n    data: updateData as any, // Prisma expects specific types for date fields (Date or null)\n  });\n  \n  RELEVANT_BUILDING_PATHS.forEach(path => revalidatePath(path));\n  revalidatePath(`/building/${buildingId}`);\n  if (building.competitionId) {\n    revalidatePath(`/history/competition/${building.competitionId}`);\n  }\n\n  return { success: true, message: `作品 \"${updatedBuilding.name}\" 状态已更新为 \"${newStatus}\"。` };\n}\n\nexport async function deleteBuildingAction(buildingId: string): Promise<{ success: boolean; message: string }> {\n  const currentUser = await getUserSession();\n  if (!currentUser || currentUser.type !== 'staff') {\n    return { success: false, message: '只有管理员才能删除作品。' };\n  }\n\n  const building = await prisma.building.findUnique({ where: { id: buildingId } });\n  if (!building) {\n    return { success: false, message: '要删除的作品不存在。' };\n  }\n  \n  // Prisma schema should handle cascading delete for UserVote via `onDelete: Cascade`\n  await prisma.building.delete({ where: { id: buildingId } });\n\n  RELEVANT_BUILDING_PATHS.forEach(path => revalidatePath(path));\n  if (building.competitionId) {\n    revalidatePath(`/history/competition/${building.competitionId}`);\n  }\n  \n  return { success: true, message: `作品 \"${building.name}\" 已成功删除。` };\n}\n\n\nexport async function getCompetitions(): Promise<Competition[]> {\n  const competitionsFromDb = await prisma.competition.findMany({\n    orderBy: [\n      { year: 'desc' },\n      { startDate: 'desc' },\n    ],\n  });\n  return serializeDates(competitionsFromDb as unknown as Competition[]);\n}\n\nexport async function getSubmittableCompetitions(): Promise<Competition[]> {\n  const submittable = await prisma.competition.findMany({\n    where: {\n      OR: [\n        { status: '进行中' },\n        { status: '策划中' },\n      ],\n    },\n    orderBy: [{year: 'desc'}, {startDate: 'desc'}]\n  });\n  return serializeDates(submittable as unknown as Competition[]);\n}\n\n\nexport async function createCompetition(\n  competitionData: Omit<Competition, 'id' | 'startDate' | 'endDate'> & { startDate: string; endDate: string; }\n): Promise<{ success: boolean; message: string; competition?: Competition }> {\n  if (!competitionData.name || !competitionData.year || !competitionData.territoryPrefix) {\n    return { success: false, message: '比赛名称、年份和领地前缀不能为空。' };\n  }\n  if (!/^\\[.+\\]$/.test(competitionData.territoryPrefix)) {\n    return { success: false, message: '领地前缀格式不正确，必须以 \"[\" 开始并以 \"]\" 结束。' };\n  }\n  try {\n    const newCompetition = await prisma.competition.create({\n      data: {\n        name: competitionData.name,\n        year: competitionData.year,\n        status: competitionData.status,\n        startDate: new Date(competitionData.startDate),\n        endDate: new Date(competitionData.endDate),\n        description: competitionData.description,\n        territoryPrefix: competitionData.territoryPrefix,\n      },\n    });\n    RELEVANT_BUILDING_PATHS.forEach(path => revalidatePath(path));\n    return { success: true, message: '比赛创建成功！', competition: serializeDates(newCompetition as unknown as Competition) };\n  } catch (error) {\n    console.error(\"Error creating competition:\", error);\n    return { success: false, message: '比赛创建失败，请检查数据或联系管理员。' };\n  }\n}\n\nexport async function updateCompetition(\n  competitionId: string,\n  competitionData: Partial<Omit<Competition, 'id' | 'startDate' | 'endDate'>> & { startDate?: string; endDate?: string;}\n): Promise<{ success: boolean; message: string; competition?: Competition }> {\n  const existingCompetition = await prisma.competition.findUnique({ where: { id: competitionId }});\n  if (!existingCompetition) {\n    return { success: false, message: '比赛不存在！' };\n  }\n   if (competitionData.territoryPrefix && !/^\\[.+\\]$/.test(competitionData.territoryPrefix)) {\n     return { success: false, message: '领地前缀格式不正确，必须以 \"[\" 开始并以 \"]\" 结束。' };\n  }\n\n  const dataToUpdate: any = { ...competitionData };\n  if (competitionData.startDate) dataToUpdate.startDate = new Date(competitionData.startDate);\n  if (competitionData.endDate) dataToUpdate.endDate = new Date(competitionData.endDate);\n  \n  try {\n    const updatedCompetition = await prisma.competition.update({\n      where: { id: competitionId },\n      data: dataToUpdate,\n    });\n    RELEVANT_BUILDING_PATHS.forEach(path => revalidatePath(path));\n    revalidatePath(`/history/competition/${competitionId}`);\n    return { success: true, message: '比赛更新成功！', competition: serializeDates(updatedCompetition as unknown as Competition) };\n  } catch (error) {\n    console.error(\"Error updating competition:\", error);\n    return { success: false, message: '比赛更新失败。' };\n  }\n}\n\nexport async function deleteCompetition(\n  competitionId: string\n): Promise<{ success: boolean; message: string }> {\n   const currentUser = await getUserSession();\n  if (!currentUser || currentUser.type !== 'staff') {\n    return { success: false, message: '只有管理员才能删除比赛。' };\n  }\n  try {\n    // Prisma schema onDelete: Cascade should handle deleting related buildings and their votes\n    await prisma.competition.delete({ where: { id: competitionId } });\n    RELEVANT_BUILDING_PATHS.forEach(path => revalidatePath(path));\n    revalidatePath(`/history/competition/${competitionId}`); \n    return { success: true, message: '比赛删除成功，其关联的作品也已一并删除。' };\n  } catch (error) {\n     console.error(\"Error deleting competition:\", error);\n     return { success: false, message: '比赛不存在或删除失败！' };\n  }\n}\n\n\nexport async function submitNewBuilding(\n  formData: BuildingSubmissionFormData\n): Promise<{ success: boolean; message: string; buildingId?: string }> {\n  const currentUser = await getUserSession();\n  if (!currentUser) {\n    return { success: false, message: '请先登录才能提交作品。' };\n  }\n\n  const competition = await prisma.competition.findUnique({where: {id: formData.competitionId}});\n  if (!competition) {\n    return { success: false, message: '选择的比赛无效。' };\n  }\n   if (competition.status !== '进行中' && competition.status !== '策划中') {\n    return { success: false, message: `无法向状态为 \"${competition.status}\" 的比赛提交作品。` };\n  }\n\n  try {\n    const newBuilding = await prisma.building.create({\n      data: {\n        name: formData.name,\n        author: currentUser.nickname,\n        authorSocialUid: currentUser.socialUid,\n        description: formData.description,\n        imageUrl: formData.imageUrl || `https://placehold.co/800x600.png?text=${encodeURIComponent(formData.name)}`,\n        aiHint: formData.aiHint,\n        votes: 0,\n        size: formData.size,\n        territoryIdentifier: formData.territoryIdentifier, \n        server: formData.server,\n        coordinateX: formData.coordinateX,\n        coordinateY: formData.coordinateY,\n        coordinateZ: formData.coordinateZ,\n        eventEdition: competition.year, \n        eventYear: competition.year,\n        status: '等待审核', \n        competitionId: formData.competitionId,\n        submissionDate: new Date(),\n      },\n    });\n\n    RELEVANT_BUILDING_PATHS.forEach(path => revalidatePath(path));\n    revalidatePath(`/history/competition/${formData.competitionId}`);\n\n    return { success: true, message: '作品提交成功，状态为等待审核。', buildingId: newBuilding.id };\n  } catch (error) {\n    console.error(\"Error submitting new building:\", error);\n    return { success: false, message: '作品提交失败，请稍后再试。' };\n  }\n}\n\nexport async function getUserSubmittedWorks(currentUserParam?: User | null): Promise<Building[]> {\n  let userToCheck = currentUserParam;\n  if (currentUserParam === undefined) { \n    userToCheck = await getUserSession();\n  }\n  if (!userToCheck) {\n    return [];\n  }\n\n  const userWorksFromDb = await prisma.building.findMany({\n    where: { authorSocialUid: userToCheck.socialUid },\n    orderBy: { submissionDate: 'desc' },\n  });\n  \n  const userVotesForBuildings = await prisma.userVote.findMany({\n      where: { \n        userId: userToCheck.socialUid,\n        buildingId: { in: userWorksFromDb.map(b => b.id) }\n      },\n      select: { buildingId: true }\n    });\n  const userVotedBuildingIds = userVotesForBuildings.map(v => v.buildingId);\n\n  const works: Building[] = userWorksFromDb.map(b => ({\n    ...b,\n    submissionDate: b.submissionDate?.toISOString(),\n    lastReportDate: b.lastReportDate?.toISOString(),\n    createdAt: b.createdAt.toISOString(),\n    updatedAt: b.updatedAt.toISOString(),\n    currentUserHasVoted: userVotedBuildingIds.includes(b.id),\n  }));\n    \n  return serializeDates(works);\n}\n\n\nexport async function getBuildingsByCompetitionId(competitionId: string, currentUserParam?: User | null): Promise<Building[]> {\n  let currentUser = currentUserParam;\n  if (currentUser === undefined) { \n    currentUser = await getUserSession();\n  }\n  \n  const buildingsFromDb = await prisma.building.findMany({\n    where: { competitionId: competitionId },\n    orderBy: { votes: 'desc' },\n  });\n\n  let userVotesForBuildings: string[] = [];\n  if (currentUser) {\n    const votes = await prisma.userVote.findMany({\n      where: { \n        userId: currentUser.socialUid,\n        buildingId: { in: buildingsFromDb.map(b => b.id) }\n      },\n      select: { buildingId: true }\n    });\n    userVotesForBuildings = votes.map(v => v.buildingId);\n  }\n\n  const works: Building[] = buildingsFromDb.map(b => ({\n    ...b,\n    submissionDate: b.submissionDate?.toISOString(),\n    lastReportDate: b.lastReportDate?.toISOString(),\n    createdAt: b.createdAt.toISOString(),\n    updatedAt: b.updatedAt.toISOString(),\n    currentUserHasVoted: currentUser ? userVotesForBuildings.includes(b.id) : false,\n  }));\n\n  return serializeDates(works);\n}\n\nexport async function reportBuildingAction(buildingId: string, reason: string): Promise<{ success: boolean; message: string }> {\n  const currentUser = await getUserSession();\n  if (!currentUser) {\n    return { success: false, message: '请先登录才能举报作品。' };\n  }\n  if (!reason || reason.trim().length < 10) {\n    return { success: false, message: '举报原因不能为空，且至少需要10个字符。' };\n  }\n\n  const building = await prisma.building.findUnique({ where: { id: buildingId } });\n  if (!building) {\n    return { success: false, message: '要举报的作品不存在。' };\n  }\n  \n  if (['审查中-被举报', '违规', '作弊', '无效'].includes(building.status)) {\n    return { success: false, message: `作品 \"${building.name}\" 当前状态 (${building.status}) 无法重复举报或已处理。` };\n  }\n  \n  try {\n    await prisma.building.update({\n      where: { id: buildingId },\n      data: {\n        status: '审查中-被举报',\n        reportReason: reason,\n        lastReportedBy: currentUser.socialUid,\n        lastReportDate: new Date(),\n      },\n    });\n    \n    console.log(`[DB_REPORT] 作品 \"${building.name}\" (ID: ${building.id}) 已被用户 ${currentUser.nickname} (ID: ${currentUser.socialUid}) 举报。原状态: ${building.status}, 作者: ${building.author} (ID: ${building.authorSocialUid})。原因: ${reason}`);\n\n    RELEVANT_BUILDING_PATHS.forEach(path => revalidatePath(path));\n    if (building.competitionId) revalidatePath(`/history/competition/${building.competitionId}`);\n    revalidatePath(`/building/${building.id}`);\n    if (building.authorSocialUid === currentUser.socialUid) { \n      revalidatePath('/dashboard/my-projects');\n    }\n\n    return { success: true, message: `作品 \"${building.name}\" 已举报成功，等待管理员审核。` };\n  } catch (error) {\n    console.error(\"Error reporting building:\", error);\n    return { success: false, message: '举报失败，请稍后再试。' };\n  }\n}\n\nexport async function dismissReportAction(buildingId: string): Promise<{ success: boolean; message: string }> {\n  const currentUser = await getUserSession();\n  if (!currentUser || currentUser.type !== 'staff') {\n    return { success: false, message: '只有管理员才能执行此操作。' };\n  }\n\n  const building = await prisma.building.findUnique({ where: { id: buildingId } });\n  if (!building) {\n    return { success: false, message: '作品不存在。' };\n  }\n  if (building.status !== '审查中-被举报') {\n    return { success: false, message: `作品 \"${building.name}\" 当前不处于“审查中-被举报”状态。` };\n  }\n  \n  try {\n    const updatedBuilding = await prisma.building.update({\n      where: { id: buildingId },\n      data: {\n        status: '有效', \n        reportReason: null,\n        lastReportedBy: null,\n        lastReportDate: null,\n      },\n    });\n\n    RELEVANT_BUILDING_PATHS.forEach(path => revalidatePath(path));\n    if (updatedBuilding.competitionId) revalidatePath(`/history/competition/${updatedBuilding.competitionId}`);\n    revalidatePath(`/building/${updatedBuilding.id}`);\n  \n    return { success: true, message: `作品 \"${updatedBuilding.name}\" 的举报已被撤销，状态已恢复为“有效”。` };\n  } catch (error) {\n    console.error(\"Error dismissing report:\", error);\n    return { success: false, message: '撤销举报失败。' };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1095, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1224, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 1238, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsQ,GACnS,oCACA","debugId":null}},
    {"offset": {"line": 1252, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}